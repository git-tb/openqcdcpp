#%%

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
pio.renderers.default = "vscode"
import io
import numpy as np

#%%
xsample = [5e-06, 5.55892230681227e-06, 6.180323442635e-06, 6.8711875697157e-06, 7.63927957111676e-06, 8.49323232317123e-06, 9.4426437236431e-06, 1.04981845661281e-05, 1.16717184731364e-05, 1.29764352358301e-05, 1.44269990590721e-05, 1.60397133779671e-05, 1.78327040983313e-05, 1.98261233205993e-05, 2.20423758368981e-05, 2.45063709469745e-05, 2.72458024232305e-05, 3.02914597714991e-05, 3.36775742859386e-05, 3.74422037874863e-05, 4.16276603700936e-05, 4.62809859623437e-05, 5.14544810494676e-05, 5.72062924982669e-05, 6.36010670917286e-05, 7.07106781186548e-05, 7.86150331847224e-05, 8.74029723242679e-05, 9.71732665070136e-05, 0.00010803572776233, 0.000120112443398143, 0.000133539148186333, 0.000148466749937143, 0.0001650630256091, 0.00018351450701767, 0.000204028577336837, 0.000226835801956983, 0.000252192519896464, 0.000280383724892731, 0.000311726268554663, 0.000346572421577573, 0.000385313833046703, 0.000428385932329331, 0.000476272823030018, 0.000529512724014003, 0.000588704018652474, 0.000654511980279452, 0.000727676249450264, 0.000809019147041312, 0.000899454916625237, 0.000999999999999999, 0.00111178446136245, 0.001236064688527, 0.00137423751394314, 0.00152785591422335, 0.00169864646463425, 0.00188852874472862, 0.00209963691322562, 0.00233434369462727, 0.00259528704716602, 0.00288539981181442, 0.00320794267559343, 0.00356654081966626, 0.00396522466411986, 0.00440847516737962, 0.0049012741893949, 0.0054491604846461, 0.00605829195429983, 0.00673551485718772, 0.00748844075749725, 0.00832553207401873, 0.00925619719246874, 0.0102908962098935, 0.0114412584996534, 0.0127202134183457, 0.0141421356237309, 0.0157230066369445, 0.0174805944648536, 0.0194346533014027, 0.0216071455524661, 0.0240224886796286, 0.0267078296372665, 0.0296933499874285, 0.0330126051218201, 0.0367029014035341, 0.0408057154673674, 0.0453671603913966, 0.0504385039792929, 0.0560767449785461, 0.0623452537109325, 0.0693144843155147, 0.0770627666093407, 0.0856771864658663, 0.0952545646060036, 0.105902544802801, 0.117740803730495, 0.130902396055891, 0.145535249890053, 0.161803829408263, 0.179890983325048, 0.2, 0.252233773966472, 0.301057089004469, 0.34669262153998, 0.389348508961366, 0.429219298905367, 0.466486836562119, 0.501321094046059, 0.533880945615366, 0.564314892275606, 0.592761739072399, 0.619351228162138, 0.644204630548131, 0.667435299180964, 0.689149185945725, 0.709445324893981, 0.728416283924468, 0.746148586972548, 0.76272310863398, 0.778215443022829, 0.792696248545829, 0.806231570165652, 0.818883140622909, 0.830708661990685, 0.84176206884576, 0.852093774256801, 0.861750899711431, 0.870777490030858, 0.879214714252243, 0.887101053395023, 0.894472475967545, 0.901362602014486, 0.907802856453256, 0.913822612398725, 0.919449325129957, 0.924708657309968, 0.929624596029597, 0.934219562209334, 0.93851451285805, 0.942529036655039, 0.946281443291284, 0.949788846977444, 0.953067244499414, 0.956131588177466, 0.958995854061724, 0.961673105675009, 0.96417555359377, 0.966514611138841, 0.968700946430032, 0.970744531041955, 0.972654685483002, 0.974440121704906, 0.976108982836752, 0.977668880324669, 0.979126928646594, 0.980489777760418, 0.981763643433541, 0.982954335592121, 0.984067284819358, 0.98510756712363, 0.986079927089474, 0.986988799516981, 0.987838329648309, 0.988632392073565, 0.989374608402276, 0.990068363781052, 0.990716822332774, 0.991322941587725, 0.991889485972476, 0.992419039418058, 0.992914017144915, 0.993376676678394, 0.993809128145003, 0.994213343896415, 0.994591167505085, 0.994944322172538, 0.995274418588646, 0.995582962277772, 0.995871360465253, 0.996140928495561, 0.996392895831416, 0.996628411661185, 0.996848550140182, 0.997054315289737, 0.997246645576403, 0.997426418192167, 0.997594453055211, 0.997751516549436, 0.997898325019841, 0.998035548039672, 0.998163811464251, 0.998283700285421, 0.998395761299609, 0.99850050560169, 0.998598410916021, 0.998689923775279, 0.99877546155703, 0.998855414387334, 0.998930146920056, 0.999, 1]

df = pd.read_csv("somepdf.dat",sep=";",skiprows=1,names=["q2","x","xqg","evolvePDF","pdf->xfxQ2"])

if(np.all(np.any(np.equal(df["evolvePDF"].to_numpy(), df["pdf->xfxQ2"].to_numpy())))):
	print("evolvePDF and pdf->xfxQ2 are exactly equal!")
else:
	print("evolvePDF and pdf->xfxQ2 are NOT exactly equal!")   
df = df.iloc[1:,:]


fig = go.Figure()
for x in xsample:
	fig.add_vline(x=x,layer="below")
for q2 in df["q2"].unique():
	dfq2 = df[df["q2"] == q2]
	fig.add_trace(go.Scatter(
		x=dfq2["x"],
		y=dfq2["xqg"]-dfq2["evolvePDF"],
		mode="markers",
		name="(xqg-evolvePDF)@q2="+"%.e"%(q2)
		))

fig.update_layout(
    xaxis=dict(
        # type="log",
        # tickformat=".0e",
		exponentformat="power",
        title="xB",
		range=[0,1]
    ),
    yaxis=dict(
        # type="log",
        # tickformat=".0e",
		exponentformat="power",
        title="err"
    ),
	title="Comparison ofopenQCDrad interpolation of PDFs (xqg)<br>vs direct LHAPDF implementation (evolvePDF)"
)

fig.show()